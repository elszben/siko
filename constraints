module Main where

class Boo a where
    boo a :: a -> Int

instance Boo Int where
    boo a = a

data C a b = C1 a b
data D a b = D1 a b

data A a b = A1 (B a) b (C (D b a) b) deriving Boo
data B a = B1 (A ((E a, E a)) Int) deriving Boo

data E a = E1 (D a Int) deriving Boo

instance [a][b] => Boo A a b

instance (Boo a, Eq a) => Boo C a b where
    boo a = boo a

instance (Boo a, Show a) => Boo D a b where
        boo a = boo a

instance Eq D a b

C impls Boo <=  C.a impls Boo
                    <- C.a <| Boo a
                C.b impls Boo
                    <- C.b <| Boo a
D impls Boo <=  D.a impls Boo
                    <- D.a <| Boo a
                D.b impls Boo
                    <- D.b <| Boo a
A impls Boo <=  (B A.a) impls Boo
                    <- B impls Boo
                    <- A.a <| B.a
                A.b impls Boo
                    <- A.b <| Boo a
                C (D A.b A.a) A.b impls Boo
                    <- C impls Boo
                        <- D A.b A.a <| C.a
                            <- D A.b A.a impls Boo
                                <- D A.b A.a <| Boo a
                                    <- A.b impls Boo
                                        <- A.b <| Boo a
                                    <- A.a impls Show
                                        <- A.a <| Show a
                            <- D A.b A.a impls Eq
                        <- A.b <| C.b
B impls Boo <=  A ((E a, E a)) Int impls Boo
                    <- A impls Boo
                        <- ((E a, E a)) <| A.a
                            <- E a <| A.a
                        <- Int <| A.b

E impls Boo <= D a Int impls Boo

main = 0