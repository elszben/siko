module Prelude where

not :: Bool -> Bool
not a = if a then False
             else True

print :: String -> ()
print msg = extern

println :: String -> ()
println msg = extern

data Result a b = Ok a | Err b

data Option a = Some a | None

data List a = extern

data Ordering = Less | Equal | Greater

instance as OrderingEq PartialEq Ordering where
    opEq a b = extern

class Show a where
    show a :: a -> String

instance as ListShow (Show a) => Show List a where
    show a = extern