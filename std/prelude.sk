module Prelude where

data Bool = extern

not :: Bool -> Bool
not a = if a then False
             else True

print :: String -> ()
print msg = extern

println :: String -> ()
println msg = extern

data Result a b = Ok a | Err b

data Option a = Some a | None

data List a = extern

data Ordering = Less | Equal | Greater

class (PartialOrd a, Eq a) => Ord a where
    cmp a :: a -> a -> Ordering

    max a :: a -> a -> a
    max a b = if a >= b then a else b

    min a :: a -> a -> a
    min a b = if a <= b then a else b

instance as BoolEq PartialEq Bool where
    opEq a b = extern

instance as OrderingEq PartialEq Ordering where
    opEq a b = extern

class Show a where
    show a :: a -> String

instance Show Bool where
    show a = if a == True then "True" else "False"

instance as ListShow (Show a) => Show List a where
    show a = extern