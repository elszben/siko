module Prelude where

data Bool = extern
data String = extern

class Add a where
    opAdd a :: a -> a -> a

instance as StringAdd Add String where
    opAdd a b = extern

class Sub a where
    opSub a :: a -> a -> a

class Mul a where
    opMul a :: a -> a -> a

class Div a where
    opDiv a :: a -> a -> a

opAnd :: Bool -> Bool -> Bool
opAnd a b = extern

opOr :: Bool -> Bool -> Bool
opOr a b = extern

opNot :: Bool -> Bool
opNot a  = not a

op_composition a b c :: (a -> b) -> (b -> c) -> a -> c
op_composition f g x = g (f x)

not :: Bool -> Bool
not a = if a then False
             else True

print :: String -> ()
print msg = extern

println :: String -> ()
println msg = extern

data Result a b = Ok a | Err b

data Option a = Some a | None

data List a = extern

data Ordering = Less | Equal | Greater

class PartialOrd a where
    partialCmp a :: a -> a -> Option Ordering
    
    opLessThan a :: a -> a -> Bool
    opLessThan a b = case partialCmp a b of
                        Some Less -> True
                        _ -> False
    
    opLessEqual a :: a -> a -> Bool
    opLessEqual a b = case partialCmp a b of
                         Some Less -> True
                         Some Equal -> True
                         _ -> False

    opGreaterThan a :: a -> a -> Bool
    opGreaterThan a b = case partialCmp a b of
                         Some Greater -> True
                         _ -> False

    opGreaterEqual a :: a -> a -> Bool
    opGreaterEqual a b = case partialCmp a b of
                         Some Greater -> True
                         Some Equal -> True
                         _ -> False

instance as StringPartialOrd PartialOrd String where
    partialCmp a b = extern

class (PartialOrd a, Eq a) => Ord a where
    cmp a :: a -> a -> Ordering

    max a :: a -> a -> a
    max a b = if a >= b then a else b

    min a :: a -> a -> a
    min a b = if a <= b then a else b


instance as StringOrd Ord String where
    cmp a b = extern

class (PartialEq a) => Eq a

class PartialEq a where
    opEq a :: a -> a -> Bool
    opNotEq a :: a -> a -> Bool
    opNotEq a b = not (opEq a b)

instance as BoolEq PartialEq Bool where
    opEq a b = extern

instance as StringEq PartialEq String where
    opEq a b = extern

instance as OrderingEq PartialEq Ordering where
    opEq a b = extern

class Show a where
    show a :: a -> String

instance Show String where
    show a = a

instance Show Bool where
    show a = if a == True then "True" else "False"

instance as ListShow (Show a) => Show List a where
    show a = extern

class Test a where
    op_stuff a b :: a -> b -> Bool