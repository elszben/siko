module Main(main) where

korte = True

class Eq a where
    eq a :: a -> a -> Bool

    ne a :: a -> a -> Bool
    ne a b = not (eq a b)

instance Eq Bool where
    eq a b = extern

instance (Eq a) => Eq List a where
    eq a b = extern

class (Alma a) => Eq2 a where
    eq a :: a -> a -> Bool

    ne a :: a -> a -> Bool

class Foo b

data Foo a = { name :: a, korte :: Int, szilva :: Int}
data Foo2 a = { name :: a, korte2 :: Int, szilva2 :: Int}

korteb  a :: (Eq a , Foo a) => a -> a
korteb a = a

main = do
    a  <- Foo { name = "name"
            , szilva = 5, korte = 3}
    a <- a { name = "qq"}
    case a of
        Foo { korte= _, szilva= b,name= a } -> print "{}" % a
    