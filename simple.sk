module Main where

class Boo a where
    boo a :: a -> Int

instance Boo Int where
    boo a = a
/*
data C a b = C1 a b
data D a b = D1 a b

data A a b = A1 (B a) b (C (D b a) b) deriving Boo
data B a = B1 (A ((E a, E a)) Int) deriving Boo

data E a = E1 (D a Int) deriving Boo
/*
instance (Boo a, Boo b, Eq b) => Boo A a b where
    boo a = case a of
            A1 (b1) b c -> boo b1 + boo b + boo c
instance (Boo a) => Boo B a where
    boo a =  case a of
                B1 (A1 b q c) -> boo c
*/

instance (Boo a, Eq a) => Boo C a b where
    boo a = boo a
instance (Boo a, Show a) => Boo D a b where
        boo a = boo a
*/

data A a = A1 Int a (B a (A a)) (C (D a) ) deriving Boo, PartialEq
data B a b = B1 a b

instance (Show a, PartialEq b) => Boo B a b where
    boo a = 0

data C a = C1 a

instance (Eq a) => Boo C a where
    boo a = 0

data D a = D1 a

instance Eq D a

instance (Eq a) => Boo D a where
    boo a = 0

main = ()