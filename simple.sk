module BooM(Boo, korte) where

class Boo a where
   boo a b :: a -> b -> Bool

korte = 5

module Main(main) where

import BooM (korte, Boo)

korte = True

instance Eq Bool where
    eq a b = extern

instance Eq Int where
    eq a b = extern

instance (Eq a) => Eq List a where
    eq a b = extern

class (BooM.Boo a) => Eq2 a where
    feq a :: a -> a -> Bool

    fne a :: a -> a -> Bool

data Foo a = { name :: a, korte :: Int, szilva :: Int}
data Foo2 a = { name :: a, korte2 :: Int, szilva2 :: Int}

korteb  a :: (Eq a) => a -> a
korteb a = a

foo a b = eq a b

main = do
    a  <- Foo { name = "name"
            , szilva = 5, korte = 3}
    a <- a { name = "qq"}
    case a of
        Foo { korte= _, szilva= b,name= a } -> print "{}" % a
    