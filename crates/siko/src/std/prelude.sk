module Prelude where

data Float = extern
data Bool = extern
data String = extern
data Int = extern

class Add a where
    opAdd a :: a -> a -> a

instance as IntAdd Add Int where
    opAdd a b = extern

instance as FloatAdd Add Float where
    opAdd a b = extern

instance as StringAdd Add String where
    opAdd a b = extern

class Sub a where
    opSub a :: a -> a -> a

instance as IntSub Sub Int where
    opSub a b = extern

instance as FloatSub Sub Float where
    opSub a b = extern

class Mul a where
    opMul a :: a -> a -> a

instance as IntMul Mul Int where
    opMul a b = extern

instance as FloatMul Mul Float where
    opMul a b = extern

class Div a where
    opDiv a :: a -> a -> a

instance as IntDiv Div Int where
    opDiv a b = extern

instance as FloatDiv Div Float where
    opDiv a b = extern

op_and :: Bool -> Bool -> Bool
op_and a b = extern

op_or :: Bool -> Bool -> Bool
op_or a b = extern

op_not :: Bool -> Bool
op_not a  = not a

op_lessthan :: Int -> Int -> Bool
op_lessthan a b = extern

op_notequals :: Int -> Int -> Bool
op_notequals a b = extern

op_greaterthan :: Int -> Int -> Bool
op_greaterthan a b = extern

op_composition a b c :: (a -> b) -> (b -> c) -> a -> c
op_composition f g x = g (f x)

not :: Bool -> Bool
not a = if a then False
             else True

print :: String -> ()
print msg = extern

println :: String -> ()
println msg = extern

data Option a = Some a | None

data List a = extern

class Eq a where
    opEq a :: a -> a -> Bool
    opNotEq a :: a -> a -> Bool
    opNotEq a b = not (opEq a b)

instance as BoolEq Eq Bool where
    opEq a b = extern
    opNotEq a b = extern

class Show a where
    show a :: a -> String

instance Show String where
    show a = a

instance Show Bool where
    show a = if a == True then "True" else "False"

instance as IntShow Show Int where
    show a = extern 

instance as ListShow (Show a) => Show List a where
    show a = extern

class Test a where
    op_stuff a b :: a -> b -> Bool