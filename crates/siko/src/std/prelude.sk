module Prelude where

data Float = extern
data Bool = extern
data String = extern
data Int = extern

class Add a where
    op_add a :: a -> a -> a

instance Add Int where
    op_add a = extern

instance Add Float where
    op_add a = extern

instance Add String where
    op_add a = extern


op_sub :: Int -> Int -> Int
op_sub x y = extern

op_mul :: Int -> Int -> Int
op_mul x y = extern

op_and :: Bool -> Bool -> Bool
op_and a b = extern

op_or :: Bool -> Bool -> Bool
op_or a b = extern

op_not :: Bool -> Bool
op_not a  = not a

op_lessthan :: Int -> Int -> Bool
op_lessthan a b = extern

op_equals :: Int -> Int -> Bool
op_equals a b = extern

op_notequals :: Int -> Int -> Bool
op_notequals a b = extern

op_greaterthan :: Int -> Int -> Bool
op_greaterthan a b = extern

op_composition a b c :: (a -> b) -> (b -> c) -> a -> c
op_composition f g x = g (f x)

not :: Bool -> Bool
not a = if a then False
             else True

print :: String -> ()
print msg = extern

println :: String -> ()
println msg = extern

data Option a = Some a | None

data List a = extern

empty a :: List a
empty = extern

insert a :: List a -> a -> List a
insert list item = extern

class Eq a where
    eq a :: a -> a -> Bool
    ne a :: a -> a -> Bool
    ne a b = not (eq a b)
